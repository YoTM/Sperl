#!/usr/bin/env perl

#https://ru.wikipedia.org/wiki/%D0%A8%D0%B5%D0%B1%D0%B0%D0%BD%D0%B3_(Unix)

use strict;
use warnings;
use 5.016; # ﻿для того чтобы можно было использовать полезные функции из новых версий. Например, say
use Data::Dumper;
#use utf8;

sub anagram {
    # Функция поиска всех множеств анаграмм по словарю.
    #
    # Входные данные для функции: ссылка на массив - каждый элемент которого - слово на русском языке в кодировке utf8
    #
    # Выходные данные: Ссылка на хеш множеств анаграмм.
    #
    # Ключ - первое встретившееся в словаре слово из множества
    #
    # Значение - ссылка на массив, каждый элемент которого слово из множества, в том порядке в котором оно встретилось в словаре в первый раз.
    #
    # Множества из одного элемента не должны попасть в результат.
    #
    # Все слова должны быть приведены к нижнему регистру.
    #
    # В результирующем множестве каждое слово должно встречаться только один раз.
    #
    # Например
    # anagram(['пятак', 'ЛиСток', 'пятка', 'стул', 'ПяТаК', 'слиток', 'тяпка', 'столик', 'слиток'])
    # должен вернуть ссылку на хеш
    # { 'пятак' => ['пятак', 'пятка', 'тяпка'], 'листок' => ['листок', 'слиток', 'столик'], }

    my $arrayref = shift;
    my %res_hash;
    my @iter_array;
	my @uses_words;


    foreach (@{$arrayref}) {
    	push(@iter_array, lc $_);
    }
    foreach my $word (@iter_array) {
		say "Берем $word ";
        # если очередное слово уже есть в ключах хэша результатов
    	if ( exists $res_hash{ $word } ) {
			say "$word - уже есть в ключах результа\n";
    		next;
    	}
		# если очередное слово уже есть в списке найденных анаграмм
		if (scalar grep {$_ eq $word} @uses_words)
                {
					say "$word - уже есть в списке использованных слов\n";
                   	next;
                }

		# перебираем слова из списка по одному и сравниваем с очередным
    	foreach my $w_iter (@iter_array) {
    		# Проверяем есть ли слово в мн-ве результатов очередного слова
    		if (scalar grep {$_ eq $w_iter} @{$res_hash{ $word }})
                {
					say "$w_iter - уже есть в мн-ве результов $word\n";
                   	next;
                }
    		# проверяем пару слов на равенство длин
    		if ( length $word == length $w_iter) {
    			my @word = sort split (//, $word);
    			my @w_iter = sort split (//, $w_iter);
    			# проверяем слова на анаграмму
    			if ( "@word" eq "@w_iter" ) {
    				# Добавляем очередное слово ключём, а слово из списка в мн-во результатов хэша
    				push( @{$res_hash{ $word }} , $w_iter );
					# добавляем слово-анаграмму из списка в список уже найденных анаграмм
					push( @uses_words, $w_iter );
    			}
    		}

    	}
        if ( @{$res_hash{ $word }} == 1) {
    		delete $res_hash{$word};
    	}
    }
    return \%res_hash;
}

#my @list = ('пятак', 'ЛиСток', 'пятка', 'стул', 'ПяТаК', 'слиток', 'тяпка', 'столик', 'слиток');
my @list = ('pyatak', 'LiStok', 'pyatka', 'stul', 'PyaTaK', 'slitok', 'tyapka', 'stolik', 'slitok');
my $result = anagram(\@list);
say "$_: @{$result->{$_}}" for sort keys %$result;