#!/usr/bin/env perl

#https://ru.wikipedia.org/wiki/%D0%A8%D0%B5%D0%B1%D0%B0%D0%BD%D0%B3_(Unix)

use strict;
use warnings;
use 5.016; # ﻿для того чтобы можно было использовать полезные функции из новых версий. Например, say
use Data::Dumper;
#use utf8;

sub anagram {
    # Функция поиска всех множеств анаграмм по словарю.
    #
    # Входные данные для функции: ссылка на массив - каждый элемент которого - слово на русском языке в кодировке utf8
    #
    # Выходные данные: Ссылка на хеш множеств анаграмм.
    #
    # Ключ - первое встретившееся в словаре слово из множества
    #
    # Значение - ссылка на массив, каждый элемент которого слово из множества, в том порядке в котором оно встретилось в словаре в первый раз.
    #
    # Множества из одного элемента не должны попасть в результат.
    #
    # Все слова должны быть приведены к нижнему регистру.
    #
    # В результирующем множестве каждое слово должно встречаться только один раз.
    #
    # Например
    # anagram(['пятак', 'ЛиСток', 'пятка', 'стул', 'ПяТаК', 'слиток', 'тяпка', 'столик', 'слиток'])
    # должен вернуть ссылку на хеш
    # { 'пятак' => ['пятак', 'пятка', 'тяпка'], 'листок' => ['листок', 'слиток', 'столик'], }

    my $arrayref = shift;

    # $arrayref = map { lc $_ } @$arrayref;

    # получили массив слов в нижнем регистре
    my @input_array = map { lc $_ } @$arrayref;

    # отсортировали сначала по длине, а затем (строки одной длины) лексикографически
    my @sorted_array = sort { length $a <=> length $b || $a cmp $b } @input_array;

    say Dumper \@sorted_array;


}

my @list = ('пятак', 'ЛиСток', 'пятка', 'стул', 'ПяТаК', 'слиток', 'тяпка', 'столик', 'слиток');
my $result = anagram(\@list);
say "$_: @{$result->{$_}}" for sort keys %$result;